[{"title":"SpringBoot 项目初始模板","url":"/posts/324750975.html","content":"SpringBoot 项目初始模板基于 Java SpringBoot 的项目初始模板，整合了常用框架和主流业务的示例代码。\n项目地址：https://github.com/Liumingyao666/springboot-init\n模板特点主流框架 &amp; 特性\nSpring Boot 2.7.x（贼新）\nSpring MVC\nMyBatis + MyBatis Plus 数据访问（开启分页）\nSpring Boot 调试工具和项目处理器\nSpring AOP 切面编程\nSpring Scheduler 定时任务\nSpring 事务注解\n\n数据存储\nMySQL 数据库\nRedis 内存数据库\nElasticsearch 搜索引擎\n腾讯云 COS 对象存储\n\n工具类\nEasy Excel 表格处理\nHutool 工具库\nGson 解析库\nApache Commons Lang3 工具类\nLombok 注解\n\n业务特性\nSpring Session Redis 分布式登录\n全局请求响应拦截器（记录日志）\n全局异常处理器\n自定义错误码\n封装通用响应类\nSwagger + Knife4j 接口文档\n自定义权限注解 + 全局校验\n全局跨域处理\n长整数丢失精度解决\n多环境配置\n\n业务功能\n提供示例 SQL（用户、帖子、帖子点赞、帖子收藏表）\n用户登录、注册、注销、更新、检索、权限管理\n帖子创建、删除、编辑、更新、数据库检索、ES 灵活检索\n帖子点赞、取消点赞\n帖子收藏、取消收藏、检索已收藏帖子\n帖子全量同步 ES、增量同步 ES 定时任务\n支持微信开放平台登录\n支持微信公众号订阅、收发消息、设置菜单\n支持分业务的文件上传\n\n单元测试\nJUnit5 单元测试\n示例单元测试类\n\n架构设计\n合理分层\n\n快速上手\n所有需要修改的地方鱼皮都标记了 todo，便于大家找到修改的位置~\n\nMySQL 数据库1）修改 application.yml 的数据库配置为你自己的：\nspring:  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/my_db    username: root    password: 123456\n\n2）执行 sql/create_table.sql 中的数据库语句，自动创建库表\n3）启动项目，访问 http://localhost:8101/api/doc.html 即可打开接口文档，不需要写前端就能在线调试接口了~\n\nRedis 分布式登录1）修改 application.yml 的 Redis 配置为你自己的：\nspring:  redis:    database: 1    host: localhost    port: 6379    timeout: 5000    password: 123456\n\n2）修改 application.yml 中的 session 存储方式：\nspring:  session:    store-type: redis\n\n3）移除 MainApplication 类开头 @SpringBootApplication 注解内的 exclude 参数：\n修改前：\n@SpringBootApplication(exclude = &#123;RedisAutoConfiguration.class&#125;)\n\n修改后：\n@SpringBootApplication\n\nElasticsearch 搜索引擎1）修改 application.yml 的 Elasticsearch 配置为你自己的：\nspring:  elasticsearch:    uris: http://localhost:9200    username: root    password: 123456\n\n2）复制 sql/post_es_mapping.json 文件中的内容，通过调用 Elasticsearch 的接口或者 Kibana Dev Tools 来创建索引（相当于数据库建表）\nPUT post_v1&#123; 参数见 sql/post_es_mapping.json 文件&#125;\n\n这步不会操作的话需要补充下 Elasticsearch 的知识，或者自行百度一下~\n3）开启同步任务，将数据库的帖子同步到 Elasticsearch\n找到 job 目录下的 FullSyncPostToEs 和 IncSyncPostToEs 文件，取消掉 @Component 注解的注释，再次执行程序即可触发同步：\n// todo 取消注释开启任务//@Component","tags":["Java","SpringBoot"]},{"title":"SpringBoot整合knife4j接口文档","url":"/posts/800209261.html","content":"官方地址：https://doc.xiaominfo.com/docs/quick-start\n本次示例使用Spring Boot 作为脚手架来快速集成Knife4j，Spring Boot版本2.7.2， Knife4j版本3.0.3\n完整代码参考我的springboot-init初始化脚手架 https://github.com/Liumingyao666/springboot-init\n如何整合？第一步：引入依赖在maven项目的pom.xml中引入Knife4j的依赖包，代码如下：\n&lt;dependency&gt;    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;    &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;3.0.3&lt;/version&gt;&lt;/dependency&gt;\n\n第二步：创建Swagger配置依赖代码如下：\npackage com.liumingyao.springbootinit.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Profile;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger2.annotations.EnableSwagger2;/** * Knife4j 接口文档配置 * https://doc.xiaominfo.com/knife4j/documentation/get_start.html * * @author &lt;a href=&quot;https://github.com/Liumingyao666&quot;&gt;刘铭垚&lt;/a&gt; *    */@Configuration@EnableSwagger2@Profile(&#123;&quot;dev&quot;, &quot;test&quot;&#125;)public class Knife4jConfig &#123;    @Bean    public Docket defaultApi2() &#123;        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(new ApiInfoBuilder()                        .title(&quot;接口文档&quot;)                        .description(&quot;springboot-init&quot;)                        .version(&quot;1.0&quot;)                        .build())                .select()                // 指定 Controller 扫描包路径                .apis(RequestHandlerSelectors.basePackage(&quot;com.liumingyao.springbootinit.controller&quot;))                .paths(PathSelectors.any())                .build();    &#125;&#125;\n\n第三步：application.yml配置在application.yml中提如下配置：\nspring:  mvc:    pathmatch:      matching-strategy: ant_path_matcher\n\n\n\n此时，启动Spring Boot工程，在浏览器中访问：http://localhost:你的端口/doc.html，即可打开接口文档，不需要写前端就能在线调试接口了~\n","tags":["Java","SpringBoot"]}]